import asyncio
import re
import jdatetime
from datetime import datetime, timedelta
from typing import Optional, List, Dict
import qrcode
from io import BytesIO
import logging
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import Config, PLANS

logger = logging.getLogger(__name__)

class BotUtils:
    """Utility functions for bot operations"""
    
    @staticmethod
    def format_price(amount: int) -> str:
        """Format price with Persian numbers and currency"""
        formatted = f"{amount:,}".replace(',', 'Ÿ¨')
        return f"{formatted} ÿ™ŸàŸÖÿßŸÜ"
    
    @staticmethod
    def format_date(date: datetime) -> str:
        """Format date to Persian"""
        jalali_date = jdatetime.datetime.fromgregorian(datetime=date)
        return jalali_date.strftime("%Y/%m/%d - %H:%M")
    
    @staticmethod
    def format_duration(days: int) -> str:
        """Format duration in Persian"""
        if days == 1:
            return "€å⁄© ÿ±Ÿàÿ≤"
        elif days == 7:
            return "€å⁄© ŸáŸÅÿ™Ÿá"
        elif days == 30:
            return "€å⁄© ŸÖÿßŸá"
        elif days == 365:
            return "€å⁄© ÿ≥ÿßŸÑ"
        else:
            return f"{days} ÿ±Ÿàÿ≤"
    
    @staticmethod
    def validate_phone(phone: str) -> bool:
        """Validate Iranian phone number"""
        pattern = r'^09\d{9}$'
        return bool(re.match(pattern, phone))
    
    @staticmethod
    def validate_card_number(card_number: str) -> bool:
        """Validate Iranian bank card number"""
        # Remove spaces and dashes
        card_number = re.sub(r'[\s-]', '', card_number)
        
        # Check if it's 16 digits
        if not re.match(r'^\d{16}$', card_number):
            return False
        
        # Luhn algorithm for card validation
        total = 0
        reverse_digits = card_number[::-1]
        
        for i, digit in enumerate(reverse_digits):
            n = int(digit)
            if i % 2 == 1:
                n *= 2
                if n > 9:
                    n = (n // 10) + (n % 10)
            total += n
        
        return total % 10 == 0
    
    @staticmethod
    def generate_qr_code(data: str) -> BytesIO:
        """Generate QR code for data"""
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(data)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        img_buffer = BytesIO()
        img.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        return img_buffer
    
    @staticmethod
    async def check_channel_membership(app, user_id: int, channel_username: str) -> bool:
        """Check if user is member of channel"""
        try:
            member = await app.get_chat_member(channel_username, user_id)
            return member.status not in ["kicked", "left"]
        except Exception as e:
            logger.error(f"Error checking channel membership: {e}")
            return False
    
    @staticmethod
    def create_pagination_keyboard(current_page: int, total_pages: int, callback_prefix: str) -> InlineKeyboardMarkup:
        """Create pagination keyboard"""
        keyboard = []
        row = []
        
        if current_page > 1:
            row.append(InlineKeyboardButton("‚¨ÖÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"{callback_prefix}:{current_page-1}"))
        
        row.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="page_info"))
        
        if current_page < total_pages:
            row.append(InlineKeyboardButton("ÿ®ÿπÿØ€å ‚û°Ô∏è", callback_data=f"{callback_prefix}:{current_page+1}"))
        
        if row:
            keyboard.append(row)
        
        return InlineKeyboardMarkup(keyboard)

class MessageTemplates:
    """Message templates for the bot"""
    
    WELCOME_MESSAGE = """
üéâ ÿ®Ÿá ÿ±ÿ®ÿßÿ™ CodeRoot ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!

ÿ®ÿß ÿß€åŸÜ ÿ±ÿ®ÿßÿ™ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ:
üè™ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿßÿÆÿ™ÿµÿßÿµ€å ÿÆŸàÿØ ÿ±ÿß ÿ®ÿ≥ÿßÿ≤€åÿØ
üì¶ ŸÖÿ≠ÿµŸàŸÑÿßÿ™ ÿÆŸàÿØ ÿ±ÿß ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸÜ€åÿØ  
üí∞ ÿØÿ±ÿ¢ŸÖÿØ ⁄©ÿ≥ÿ® ⁄©ŸÜ€åÿØ

ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ÿßÿ≤ ŸÖŸÜŸà€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:
    """
    
    SHOP_CREATED_MESSAGE = """
üéä ÿ™ÿ®ÿ±€å⁄©! ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ¥ŸÖÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ

üìã ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá:
üè™ ŸÜÿßŸÖ: {shop_name}
ü§ñ ÿ±ÿ®ÿßÿ™: @{bot_username}
üìä ŸæŸÑŸÜ: {plan_name}
‚è∞ ÿßŸÜŸÇÿ∂ÿß: {expires_date}

‚úÖ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ¥ŸÖÿß ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿ±ÿ±ÿ≥€å ÿßÿ≥ÿ™ Ÿà ÿ®ÿ≤ŸàÿØ€å ŸÅÿπÿßŸÑ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.
    """
    
    PAYMENT_REQUEST_MESSAGE = """
üí≥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™

üí∞ ŸÖÿ®ŸÑÿ∫: {amount}
üìã ÿ¥ÿ±ÿ≠: {description}
‚è∞ ŸÖŸáŸÑÿ™ Ÿæÿ±ÿØÿßÿÆÿ™: 24 ÿ≥ÿßÿπÿ™

üè¶ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™:
ÿ¥ŸÖÿßÿ±Ÿá ⁄©ÿßÿ±ÿ™: {card_number}
ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™: {card_holder}

üìù Ÿæÿ≥ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ÿ™ÿµŸà€åÿ± ÿ±ÿ≥€åÿØ ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ.
    """
    
    SUBSCRIPTION_EXPIRED_MESSAGE = """
‚ö†Ô∏è ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ¥ŸÖÿß ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá ÿßÿ≥ÿ™

ÿ®ÿ±ÿß€å ÿßÿØÿßŸÖŸá ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿÆÿØŸÖÿßÿ™ÿå ŸÑÿ∑ŸÅÿßŸã ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿÆŸàÿØ ÿ±ÿß ÿ™ŸÖÿØ€åÿØ ⁄©ŸÜ€åÿØ.

üí° ÿ®ÿ±ÿß€å ÿ™ŸÖÿØ€åÿØ ÿßÿ≤ ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:
    """

class KeyboardMarkups:
    """Keyboard markups for the bot"""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """Main menu keyboard"""
        keyboard = [
            [InlineKeyboardButton("üõç ÿ≥ÿßÿÆÿ™ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá", callback_data="create_shop")],
            [InlineKeyboardButton("üè™ Ÿàÿ±ŸàÿØ ÿ®Ÿá ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ŸÖŸÜ", callback_data="my_shop")],
            [InlineKeyboardButton("üìä ⁄Øÿ≤ÿßÿ±ÿ¥‚ÄåŸáÿß", callback_data="reports"), 
             InlineKeyboardButton("üí≥ ÿ™ŸÖÿØ€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄©", callback_data="renew_subscription")],
            [InlineKeyboardButton("üÜò Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support"), 
             InlineKeyboardButton("üìö ÿ¢ŸÖŸàÿ≤ÿ¥", callback_data="tutorial")],
            [InlineKeyboardButton("üìú ŸÇŸàÿßŸÜ€åŸÜ", callback_data="rules")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def admin_menu() -> InlineKeyboardMarkup:
        """Admin menu keyboard"""
        keyboard = [
            [InlineKeyboardButton("üë• ŸÖÿØ€åÿ±€åÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá‚ÄåŸáÿß", callback_data="admin_users"),
             InlineKeyboardButton("üè™ ŸÖÿØ€åÿ±€åÿ™ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá‚ÄåŸáÿß", callback_data="admin_shops")],
            [InlineKeyboardButton("üí∞ ⁄Øÿ≤ÿßÿ±ÿ¥ ŸÖÿßŸÑ€å", callback_data="admin_finance"),
             InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ±Ÿáÿß", callback_data="admin_stats")],
            [InlineKeyboardButton("üì¢ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ", callback_data="admin_broadcast"),
             InlineKeyboardButton("‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™", callback_data="admin_settings")],
            [InlineKeyboardButton("üîÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def plans_menu() -> InlineKeyboardMarkup:
        """Plans selection keyboard"""
        keyboard = []
        
        for plan_key, plan_data in PLANS.items():
            if plan_key == "free":
                text = f"üÜì {plan_data['name']} (ÿ±ÿß€å⁄ØÿßŸÜ)"
            else:
                text = f"üíé {plan_data['name']} ({plan_data['price']:,} ÿ™ŸàŸÖÿßŸÜ)"
            
            keyboard.append([InlineKeyboardButton(text, callback_data=f"select_plan:{plan_key}")])
        
        keyboard.append([InlineKeyboardButton("üîÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def shop_management_menu() -> InlineKeyboardMarkup:
        """Shop management keyboard"""
        keyboard = [
            [InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ŸÖÿ≠ÿµŸàŸÑ", callback_data="add_product"),
             InlineKeyboardButton("üì¶ ŸÖÿØ€åÿ±€åÿ™ ŸÖÿ≠ÿµŸàŸÑÿßÿ™", callback_data="manage_products")],
            [InlineKeyboardButton("üìã ÿ≥ŸÅÿßÿ±ÿ¥‚ÄåŸáÿß", callback_data="orders"),
             InlineKeyboardButton("üìä ⁄Øÿ≤ÿßÿ±ÿ¥ ŸÅÿ±Ÿàÿ¥", callback_data="sales_report")],
            [InlineKeyboardButton("‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá", callback_data="shop_settings"),
             InlineKeyboardButton("üéÅ ÿßÿ±ÿ™ŸÇÿßÿ° ŸæŸÑŸÜ", callback_data="upgrade_plan")],
            [InlineKeyboardButton("üîÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
        """Confirmation keyboard"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ™ÿ£€å€åÿØ", callback_data=f"confirm:{action}"),
             InlineKeyboardButton("‚ùå ŸÑÿ∫Ÿà", callback_data="cancel")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def back_keyboard(callback_data: str = "back") -> InlineKeyboardMarkup:
        """Back button keyboard"""
        keyboard = [
            [InlineKeyboardButton("üîÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data=callback_data)]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def cancel_keyboard() -> InlineKeyboardMarkup:
        """Cancel button keyboard"""
        keyboard = [
            [InlineKeyboardButton("‚ùå ŸÑÿ∫Ÿà", callback_data="cancel")]
        ]
        return InlineKeyboardMarkup(keyboard)

class ValidationUtils:
    """Validation utilities"""
    
    @staticmethod
    def validate_shop_name(name: str) -> bool:
        """Validate shop name"""
        if len(name) < 3 or len(name) > 50:
            return False
        
        # Check for invalid characters
        invalid_chars = ['@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '=', '{', '}', '[', ']', '|', '\\', ':', ';', '"', "'", '<', '>', ',', '.', '?', '/']
        for char in invalid_chars:
            if char in name:
                return False
        
        return True
    
    @staticmethod
    def validate_product_name(name: str) -> bool:
        """Validate product name"""
        return 3 <= len(name) <= 100
    
    @staticmethod
    def validate_product_price(price: str) -> Optional[int]:
        """Validate and convert product price"""
        try:
            price_int = int(price.replace(',', '').replace('Ÿ¨', ''))
            if price_int > 0:
                return price_int
        except ValueError:
            pass
        return None
    
    @staticmethod
    def validate_bot_token(token: str) -> bool:
        """Validate Telegram bot token format"""
        pattern = r'^\d+:[a-zA-Z0-9_-]{35}$'
        return bool(re.match(pattern, token))

class ExcelGenerator:
    """Excel file generation utilities"""
    
    @staticmethod
    async def generate_users_report(users: List[Dict]) -> BytesIO:
        """Generate users report in Excel format"""
        try:
            import pandas as pd
            
            # Prepare data
            data = []
            for user in users:
                data.append({
                    'ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ±€å': user.get('user_id', ''),
                    'ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å': user.get('username', ''),
                    'ŸÜÿßŸÖ': user.get('first_name', ''),
                    'ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€å': user.get('last_name', ''),
                    'ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ': user.get('phone', ''),
                    'ŸæŸÑŸÜ ÿßÿ¥ÿ™ÿ±ÿß⁄©': PLANS.get(user.get('subscription', {}).get('plan', 'free'), {}).get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ'),
                    'ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß': BotUtils.format_date(user.get('subscription', {}).get('expires_at', datetime.utcnow())),
                    'ÿ™ÿπÿØÿßÿØ ÿ≥ŸÅÿßÿ±ÿ¥‚ÄåŸáÿß': user.get('statistics', {}).get('total_orders', 0),
                    '⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ': BotUtils.format_price(user.get('statistics', {}).get('total_revenue', 0)),
                    'ÿ™ÿßÿ±€åÿÆ ÿπÿ∂Ÿà€åÿ™': BotUtils.format_date(user.get('created_at', datetime.utcnow()))
                })
            
            # Create DataFrame
            df = pd.DataFrame(data)
            
            # Create Excel file
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='⁄Øÿ≤ÿßÿ±ÿ¥ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ', index=False)
            
            output.seek(0)
            return output
            
        except ImportError:
            logger.error("pandas library not found. Cannot generate Excel report.")
            return None
        except Exception as e:
            logger.error(f"Error generating Excel report: {e}")
            return None

class SecurityUtils:
    """Security utilities"""
    
    @staticmethod
    async def is_user_admin(user_id: int) -> bool:
        """Check if user is admin"""
        return user_id == Config.ADMIN_USER_ID
    
    @staticmethod
    def sanitize_input(text: str) -> str:
        """Sanitize user input"""
        # Remove HTML tags
        import re
        clean = re.compile('<.*?>')
        text = re.sub(clean, '', text)
        
        # Remove script tags
        script = re.compile('<script.*?</script>')
        text = re.sub(script, '', text, flags=re.DOTALL)
        
        return text.strip()
    
    @staticmethod
    def generate_shop_token() -> str:
        """Generate unique shop token"""
        import secrets
        import string
        
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(32))

class NotificationUtils:
    """Notification utilities"""
    
    @staticmethod
    async def send_admin_notification(app, message: str):
        """Send notification to admin"""
        try:
            await app.send_message(Config.ADMIN_USER_ID, f"üîî ÿßÿπŸÑÿßŸÜ ŸÖÿØ€åÿ±€åÿ™:\n\n{message}")
        except Exception as e:
            logger.error(f"Failed to send admin notification: {e}")
    
    @staticmethod
    async def send_subscription_reminder(app, user_id: int, days_left: int):
        """Send subscription expiration reminder"""
        try:
            message = f"‚ö†Ô∏è €åÿßÿØÿ¢Ÿàÿ±€å ÿßŸÜŸÇÿ∂ÿß€å ÿßÿ¥ÿ™ÿ±ÿß⁄©\n\n{days_left} ÿ±Ÿàÿ≤ ÿ™ÿß Ÿæÿß€åÿßŸÜ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ¥ŸÖÿß ÿ®ÿßŸÇ€å ŸÖÿßŸÜÿØŸá ÿßÿ≥ÿ™.\n\nÿ®ÿ±ÿß€å ÿ™ŸÖÿØ€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿßÿ≤ ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ."
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ ÿ™ŸÖÿØ€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄©", callback_data="renew_subscription")]
            ])
            
            await app.send_message(user_id, message, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Failed to send subscription reminder: {e}")

# Time utilities
class TimeUtils:
    """Time related utilities"""
    
    @staticmethod
    def get_persian_weekday(date: datetime) -> str:
        """Get Persian weekday name"""
        weekdays = ['ÿØŸàÿ¥ŸÜÿ®Ÿá', 'ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá', '⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá', 'ŸæŸÜÿ¨‚Äåÿ¥ŸÜÿ®Ÿá', 'ÿ¨ŸÖÿπŸá', 'ÿ¥ŸÜÿ®Ÿá', '€å⁄©ÿ¥ŸÜÿ®Ÿá']
        return weekdays[date.weekday()]
    
    @staticmethod
    def get_time_ago(date: datetime) -> str:
        """Get time ago in Persian"""
        now = datetime.utcnow()
        diff = now - date
        
        if diff.days > 0:
            return f"{diff.days} ÿ±Ÿàÿ≤ Ÿæ€åÿ¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} ÿ≥ÿßÿπÿ™ Ÿæ€åÿ¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} ÿØŸÇ€åŸÇŸá Ÿæ€åÿ¥"
        else:
            return "ŸáŸÖ€åŸÜ ÿßŸÑÿßŸÜ"
    
    @staticmethod
    def is_subscription_expired(expires_at: datetime) -> bool:
        """Check if subscription is expired"""
        return datetime.utcnow() > expires_at
    
    @staticmethod
    def days_until_expiration(expires_at: datetime) -> int:
        """Get days until subscription expiration"""
        diff = expires_at - datetime.utcnow()
        return max(0, diff.days)