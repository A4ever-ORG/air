# Multi-stage build for Liara deployment
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    && update-ca-certificates

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application with optimizations for Liara
RUN CGO_ENABLED=0 GOOS=linux go build \
    -a -installsuffix cgo \
    -ldflags="-w -s -extldflags '-static' -X main.version=2.0.0 -X main.commit=liara-optimized" \
    -o coderoot-bot .

# Security scanning stage
FROM alpine:latest AS security-scanner

# Install security tools
RUN apk add --no-cache \
    curl \
    wget \
    && rm -rf /var/cache/apk/*

# Final stage - Optimized for Liara
FROM debian:bullseye-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r coderoot && useradd -r -g coderoot coderoot

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/coderoot-bot .

# Copy security tools from scanner stage
COPY --from=security-scanner /usr/bin/curl /usr/bin/
COPY --from=security-scanner /usr/bin/wget /usr/bin/

# Create necessary directories
RUN mkdir -p /app/logs /app/config /app/data \
    && chown -R coderoot:coderoot /app

# Switch to non-root user
USER coderoot

# Expose ports for Liara
EXPOSE 8080

# Set environment variables for Liara optimization
ENV ENVIRONMENT=production \
    GOMAXPROCS=2 \
    GOGC=50 \
    GOMEMLIMIT=512MiB \
    GODEBUG=http2server=1 \
    TZ=UTC \
    LANG=en_US.UTF-8

# Health check for Liara
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the application
ENTRYPOINT ["./coderoot-bot"]

# Default command
CMD [""]