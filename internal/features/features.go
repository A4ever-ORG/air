package features

import (
	"fmt"
	"runtime"
	"time"

	"github.com/awesome-project/go-multi-platform/internal/platform"
	"github.com/briandowns/spinner"
	"github.com/fatih/color"
	"github.com/shirou/gopsutil/v3/cpu"
	"github.com/shirou/gopsutil/v3/disk"
	"github.com/shirou/gopsutil/v3/mem"
	"github.com/shirou/gopsutil/v3/net"
)

func ShowSystemInfo() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)
	blue := color.New(color.FgBlue, color.Bold)

	cyan.Println("üîç System Information")
	fmt.Println()

	// Platform info
	info := platform.GetPlatformInfo()
	green.Printf("üìç Platform: %s\n", info.Name)
	yellow.Printf("üñ•Ô∏è  OS: %s %s\n", info.OS, info.Arch)
	blue.Printf("üêß Kernel: %s\n", info.Kernel)
	fmt.Println()

	// CPU Info
	cpuInfo, err := cpu.Info()
	if err != nil {
		red.Printf("‚ö†Ô∏è  CPU Info: Error retrieving CPU information (%v)\n", err)
	} else if len(cpuInfo) > 0 {
		green.Printf("‚ö° CPU: %s\n", cpuInfo[0].ModelName)
		yellow.Printf("üî¢ Cores: %d\n", runtime.NumCPU())
		
		cpuPercent, err := cpu.Percent(0, false)
		if err != nil {
			red.Printf("‚ö†Ô∏è  CPU Usage: Error retrieving CPU usage (%v)\n", err)
		} else if len(cpuPercent) > 0 {
			red.Printf("üìä CPU Usage: %.1f%%\n", cpuPercent[0])
		}
	} else {
		red.Printf("‚ö†Ô∏è  CPU Info: No CPU information available\n")
	}
	fmt.Println()

	// Memory Info
	memInfo, err := mem.VirtualMemory()
	if err != nil {
		red.Printf("‚ö†Ô∏è  Memory Info: Error retrieving memory information (%v)\n", err)
	} else {
		green.Printf("üíæ Total Memory: %.2f GB\n", float64(memInfo.Total)/1024/1024/1024)
		yellow.Printf("üìà Used Memory: %.2f GB (%.1f%%)\n", 
			float64(memInfo.Used)/1024/1024/1024, memInfo.UsedPercent)
		blue.Printf("üìâ Available Memory: %.2f GB\n", float64(memInfo.Available)/1024/1024/1024)
	}
	fmt.Println()

	// Disk Info
	diskInfo, err := disk.Usage("/")
	if err != nil {
		red.Printf("‚ö†Ô∏è  Disk Info: Error retrieving disk information (%v)\n", err)
	} else {
		green.Printf("üíø Total Disk: %.2f GB\n", float64(diskInfo.Total)/1024/1024/1024)
		yellow.Printf("üìÅ Used Disk: %.2f GB (%.1f%%)\n", 
			float64(diskInfo.Used)/1024/1024/1024, diskInfo.UsedPercent)
		blue.Printf("üìÇ Free Disk: %.2f GB\n", float64(diskInfo.Free)/1024/1024/1024)
	}
	fmt.Println()

	// Network Info
	netInfo, err := net.Interfaces()
	if err != nil {
		red.Printf("‚ö†Ô∏è  Network Info: Error retrieving network information (%v)\n", err)
	} else {
		green.Println("üåê Network Interfaces:")
		for _, iface := range netInfo {
			if len(iface.Addrs) > 0 {
				yellow.Printf("  üì° %s: %s\n", iface.Name, iface.Addrs[0].Addr)
			}
		}
	}
	fmt.Println()

	// Platform-specific features
	cyan.Println("üéØ Platform Features:")
	for i, feature := range info.Features {
		green.Printf("  %d. %s\n", i+1, feature)
	}
	fmt.Println()
}

func ShowNetworkTools() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("üåê Network Analysis Tools")
	fmt.Println()

	info := platform.GetPlatformInfo()
	
	if info.IsKali {
		green.Println("‚öîÔ∏è Kali Linux Network Tools:")
		yellow.Println("  ‚Ä¢ Nmap - Network scanning and discovery")
		yellow.Println("  ‚Ä¢ Wireshark - Packet analysis")
		yellow.Println("  ‚Ä¢ Aircrack-ng - Wireless network security")
		yellow.Println("  ‚Ä¢ Metasploit - Exploitation framework")
		yellow.Println("  ‚Ä¢ Burp Suite - Web application security")
	} else if info.IsTermux {
		green.Println("üì± Termux Network Tools:")
		yellow.Println("  ‚Ä¢ Nmap - Mobile network scanning")
		yellow.Println("  ‚Ä¢ Termux API - Android integration")
		yellow.Println("  ‚Ä¢ SSH client - Remote access")
		yellow.Println("  ‚Ä¢ Network utilities - ping, traceroute")
		yellow.Println("  ‚Ä¢ Mobile-optimized scanning")
	} else {
		green.Println("üñ•Ô∏è Standard Network Tools:")
		yellow.Println("  ‚Ä¢ Basic network scanning")
		yellow.Println("  ‚Ä¢ Port detection")
		yellow.Println("  ‚Ä¢ Connection testing")
		yellow.Println("  ‚Ä¢ Network monitoring")
	}

	fmt.Println()
	red.Println("üöÄ Advanced Features:")
	yellow.Println("  ‚Ä¢ Real-time network monitoring")
	yellow.Println("  ‚Ä¢ Automated vulnerability scanning")
	yellow.Println("  ‚Ä¢ Network traffic analysis")
	yellow.Println("  ‚Ä¢ Custom scanning profiles")
	yellow.Println("  ‚Ä¢ Export capabilities")
	fmt.Println()
}

func ShowSecurityTools() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("üîí Security Analysis Tools")
	fmt.Println()

	info := platform.GetPlatformInfo()
	
	if info.IsKali {
		green.Println("‚öîÔ∏è Kali Linux Security Suite:")
		yellow.Println("  ‚Ä¢ Penetration testing tools")
		yellow.Println("  ‚Ä¢ Vulnerability assessment")
		yellow.Println("  ‚Ä¢ Social engineering toolkit")
		yellow.Println("  ‚Ä¢ Password cracking tools")
		yellow.Println("  ‚Ä¢ Forensic analysis tools")
	} else if info.IsTermux {
		green.Println("üì± Termux Security Tools:")
		yellow.Println("  ‚Ä¢ Mobile security testing")
		yellow.Println("  ‚Ä¢ Android app analysis")
		yellow.Println("  ‚Ä¢ Network security scanning")
		yellow.Println("  ‚Ä¢ Basic penetration testing")
		yellow.Println("  ‚Ä¢ Security education tools")
	} else {
		green.Println("üñ•Ô∏è Standard Security Tools:")
		yellow.Println("  ‚Ä¢ Basic security scanning")
		yellow.Println("  ‚Ä¢ System hardening")
		yellow.Println("  ‚Ä¢ Security monitoring")
		yellow.Println("  ‚Ä¢ Access control")
	}

	fmt.Println()
	red.Println("üõ°Ô∏è Security Features:")
	yellow.Println("  ‚Ä¢ Automated security audits")
	yellow.Println("  ‚Ä¢ Real-time threat detection")
	yellow.Println("  ‚Ä¢ Security report generation")
	yellow.Println("  ‚Ä¢ Compliance checking")
	yellow.Println("  ‚Ä¢ Incident response tools")
	fmt.Println()
}

func ShowKaliTools() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("‚öîÔ∏è Kali Linux Exclusive Tools")
	fmt.Println()

	green.Println("üéØ Penetration Testing:")
	yellow.Println("  ‚Ä¢ Metasploit Framework")
	yellow.Println("  ‚Ä¢ Nmap - Network discovery")
	yellow.Println("  ‚Ä¢ Wireshark - Packet analysis")
	yellow.Println("  ‚Ä¢ Aircrack-ng - Wireless security")
	yellow.Println("  ‚Ä¢ John the Ripper - Password cracking")
	fmt.Println()

	green.Println("üîç Information Gathering:")
	yellow.Println("  ‚Ä¢ Maltego - OSINT framework")
	yellow.Println("  ‚Ä¢ Recon-ng - Reconnaissance")
	yellow.Println("  ‚Ä¢ TheHarvester - Email harvesting")
	yellow.Println("  ‚Ä¢ Sublist3r - Subdomain enumeration")
	yellow.Println("  ‚Ä¢ Shodan CLI - Internet scanning")
	fmt.Println()

	green.Println("üíª Exploitation Tools:")
	yellow.Println("  ‚Ä¢ BeEF - Browser exploitation")
	yellow.Println("  ‚Ä¢ Social Engineering Toolkit")
	yellow.Println("  ‚Ä¢ SQLmap - SQL injection")
	yellow.Println("  ‚Ä¢ Burp Suite - Web security")
	yellow.Println("  ‚Ä¢ OWASP ZAP - Web app testing")
	fmt.Println()

	red.Println("üöÄ Advanced Features:")
	yellow.Println("  ‚Ä¢ Automated penetration testing")
	yellow.Println("  ‚Ä¢ Custom exploit development")
	yellow.Println("  ‚Ä¢ Advanced evasion techniques")
	yellow.Println("  ‚Ä¢ Post-exploitation tools")
	yellow.Println("  ‚Ä¢ Professional reporting")
	fmt.Println()
}

func ShowTermuxTools() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("üì± Termux Exclusive Features")
	fmt.Println()

	green.Println("üì± Mobile Optimization:")
	yellow.Println("  ‚Ä¢ Touch-friendly interface")
	yellow.Println("  ‚Ä¢ Battery optimization")
	yellow.Println("  ‚Ä¢ Mobile-optimized scanning")
	yellow.Println("  ‚Ä¢ Android API integration")
	yellow.Println("  ‚Ä¢ Gesture support")
	fmt.Println()

	green.Println("üîß Android Integration:")
	yellow.Println("  ‚Ä¢ Termux API access")
	yellow.Println("  ‚Ä¢ Android sensor data")
	yellow.Println("  ‚Ä¢ Camera integration")
	yellow.Println("  ‚Ä¢ GPS location services")
	yellow.Println("  ‚Ä¢ Bluetooth scanning")
	fmt.Println()

	green.Println("üìä Mobile Security:")
	yellow.Println("  ‚Ä¢ Android app analysis")
	yellow.Println("  ‚Ä¢ Mobile network scanning")
	yellow.Println("  ‚Ä¢ WiFi security testing")
	yellow.Println("  ‚Ä¢ Bluetooth security")
	yellow.Println("  ‚Ä¢ Mobile forensics")
	fmt.Println()

	red.Println("üöÄ Advanced Mobile Features:")
	yellow.Println("  ‚Ä¢ Offline capability")
	yellow.Println("  ‚Ä¢ Low-resource optimization")
	yellow.Println("  ‚Ä¢ Mobile-specific exploits")
	yellow.Println("  ‚Ä¢ Touch gesture controls")
	yellow.Println("  ‚Ä¢ Mobile reporting")
	fmt.Println()
}

func RunDemo() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)

	cyan.Println("üéÆ Interactive Demo Mode")
	fmt.Println()

	// Create spinner
	s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
	s.Suffix = " Initializing demo..."
	s.Start()

	time.Sleep(2 * time.Second)
	s.Stop()

	green.Println("‚úÖ Demo initialized successfully!")
	fmt.Println()

	// Platform-specific demo
	info := platform.GetPlatformInfo()
	
	if info.IsKali {
		runKaliDemo()
	} else if info.IsTermux {
		runTermuxDemo()
	} else {
		runGenericDemo()
	}
}

func runKaliDemo() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("‚öîÔ∏è Kali Linux Demo")
	fmt.Println()

	demos := []struct {
		name        string
		description string
		duration    time.Duration
	}{
		{"Network Scanning", "Performing network discovery...", 3 * time.Second},
		{"Vulnerability Assessment", "Analyzing system vulnerabilities...", 4 * time.Second},
		{"Penetration Testing", "Running penetration tests...", 5 * time.Second},
		{"Forensic Analysis", "Collecting forensic data...", 3 * time.Second},
		{"Report Generation", "Generating security report...", 2 * time.Second},
	}

	for i, demo := range demos {
		green.Printf("üéØ Step %d: %s\n", i+1, demo.name)
		yellow.Printf("   %s\n", demo.description)
		
		s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
		s.Suffix = " Processing..."
		s.Start()
		
		time.Sleep(demo.duration)
		s.Stop()
		
		red.Printf("   ‚úÖ Completed!\n\n")
	}

	green.Println("üéâ Kali Linux demo completed successfully!")
	fmt.Println()
}

func runTermuxDemo() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("üì± Termux Demo")
	fmt.Println()

	demos := []struct {
		name        string
		description string
		duration    time.Duration
	}{
		{"Mobile Optimization", "Optimizing for mobile...", 2 * time.Second},
		{"Android Integration", "Integrating with Android...", 3 * time.Second},
		{"Touch Interface", "Configuring touch controls...", 2 * time.Second},
		{"Battery Optimization", "Optimizing battery usage...", 2 * time.Second},
		{"Mobile Security", "Testing mobile security...", 4 * time.Second},
	}

	for i, demo := range demos {
		green.Printf("üì± Step %d: %s\n", i+1, demo.name)
		yellow.Printf("   %s\n", demo.description)
		
		s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
		s.Suffix = " Processing..."
		s.Start()
		
		time.Sleep(demo.duration)
		s.Stop()
		
		red.Printf("   ‚úÖ Completed!\n\n")
	}

	green.Println("üéâ Termux demo completed successfully!")
	fmt.Println()
}

func runGenericDemo() {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	red := color.New(color.FgRed, color.Bold)

	cyan.Println("üñ•Ô∏è Generic Linux Demo")
	fmt.Println()

	demos := []struct {
		name        string
		description string
		duration    time.Duration
	}{
		{"System Analysis", "Analyzing system...", 3 * time.Second},
		{"Network Testing", "Testing network connectivity...", 2 * time.Second},
		{"Security Check", "Performing security checks...", 3 * time.Second},
		{"Performance Test", "Testing performance...", 2 * time.Second},
	}

	for i, demo := range demos {
		green.Printf("üñ•Ô∏è Step %d: %s\n", i+1, demo.name)
		yellow.Printf("   %s\n", demo.description)
		
		s := spinner.New(spinner.CharSets[9], 100*time.Millisecond)
		s.Suffix = " Processing..."
		s.Start()
		
		time.Sleep(demo.duration)
		s.Stop()
		
		red.Printf("   ‚úÖ Completed!\n\n")
	}

	green.Println("üéâ Generic demo completed successfully!")
	fmt.Println()
}